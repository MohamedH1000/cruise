// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  phoneNumber String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId
  role String?

  account Account[]
  cruise Cruise[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cruise {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name String
  description String?
  imageSrc String[] @default([])
  amenities String[] @default([])
  location Json?
  type String?
  status String?
  numberOfGuests Int?
  discount String?
  price Int
  delivery Int?
  choices String[] @default([])
  createdAt DateTime @default(now())

  reservations Reservation[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attractions {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    subtitle String?
    description String
    reservationId String? @db.ObjectId
    imageSrc String[] @default([])
    location Json?
    createdAt DateTime? @default(now())
    restaurants Restaurant[]

    reservation Reservation? @relation(fields: [reservationId], references: [id])
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  cruiseId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  servicePrice Json?
  nameOfReserver String?
  currency String?
  email String?
  status String?
  phoneNumber String?
  createdAt DateTime @default(now())
  attractions Attractions[]
  sessionId String?
 
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  cruise Cruise @relation(fields: [cruiseId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  attractionId String? @db.ObjectId
  name String
  description String?
  imageSrc String[] @default([])
  createdAt DateTime? @default(now())

  attraction Attractions? @relation(fields: [attractionId], references: [id])
}
